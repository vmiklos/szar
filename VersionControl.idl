module VersionControl {
	// Typedefs
	typedef string ModelData;

	// Enumerations
	enum AccessLevel { Read, ReadWrite };

	// Exceptions without parameters
	exception AccessDenied {};
	exception DbError {};
	exception InvalidUser {};
	exception InvalidModel {};
	exception InvalidRevision {};

	// Interface for user information
	interface User {
		string getName() raises (DbError, InvalidUser);
		boolean getAdmin() raises (DbError, InvalidUser);
	};

	// User - Access tuple
	struct UserAccess {
		User grantee;
		AccessLevel level;
	};

	// User is already assigned to the model
	exception UserAlreadyAssigned {
		UserAccess access;
	};

	typedef sequence<UserAccess> UserAccessSeq;

	// Interface for user administration
	interface UserAdmin : User {
		void setPassword(in string password) raises (DbError);
		void setAdmin(in boolean admin) raises (AccessDenied, DbError); // inaccessible for users
	};

	typedef sequence<UserAdmin> UserAdminSeq;

	// Model is locked by another user
	exception LockedException {
		User lockedBy;
	};

	// The interface of a single revision of a model
	interface Revision {
		unsigned long getNumber();
		string getData() raises (DbError);
		User getAuthor() raises (DbError);
	};

	typedef sequence<Revision> RevisionSeq;

	// The interface of models (the object being tracked)
	interface Model {
		string getName() raises (InvalidModel, DbError);
		RevisionSeq getRevisions() raises (DbError);
		Revision getRevision(in unsigned long number);
		Revision getCurrentRevision() raises (InvalidModel, DbError);
		void commit(in ModelData data, in unsigned long base) raises (AccessDenied, InvalidModel, LockedException, DbError);
		void lock() raises (AccessDenied, InvalidModel, LockedException, DbError);
		void unlock() raises (AccessDenied, InvalidModel, LockedException, DbError); // AD + LE not raised for admins
	};

	// Interface for model administration
	interface ModelAdmin : Model {
		UserAccessSeq getUsers() raises (InvalidModel, DbError);
		void setName(in string name) raises (InvalidModel, DbError);
		void removeUser(in User toRemove) raises (InvalidModel, InvalidUser, DbError);
		void changeUserLevel(in User toChange, in AccessLevel access) raises (InvalidModel, InvalidUser, DbError);
		void addUser(in UserAccess access) raises (InvalidModel, UserAlreadyAssigned, DbError);
		void removeModel() raises (InvalidModel, DbError);
	};

	typedef sequence<ModelAdmin> ModelAdminSeq;

	// A model with this name already exists
	exception AlreadyExistsException {
		Model existingModel;
	};

	typedef sequence<Model> ModelSeq;

	// The interface for administrators ("director room")
	interface Admin {
		Model addModel(in string name) raises (AlreadyExistsException, DbError);
		UserAdmin addUser(in string name) raises (AlreadyExistsException, DbError);
		UserAdminSeq getUsers() raises (DbError);
		void removeUser(in UserAdmin user) raises (DbError);
		ModelAdmin getModelAdmin(in Model target);
	};

	// The interface for logged-in users ("hallway")
	interface Root {
		Admin getAdmin() raises (AccessDenied);
		ModelSeq getModels() raises (DbError);
		Model getModel(in string name) raises (InvalidModel, DbError);
		UserAdmin getMyUser();
	};

	// The only interface with network-facing implementation ("door")
	interface Auth {
		Root login(in string username, in string password) raises (AccessDenied, DbError);
	};
};
